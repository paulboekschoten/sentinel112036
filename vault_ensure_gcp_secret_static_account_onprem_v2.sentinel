import "tfplan/v2" as tfplan
import "standards" as standards
import "utilities" as utilities
import "strings"
import "types"

# Switch to display extra information, only for debugging.
trace = false

rt = "vault_gcp_secret_static_account"

static_accounts = filter tfplan.planned_values.resources as _, planned_resource {
	planned_resource.type is rt
}


get_resources_by_type_raw_temp = func(tfplan_raw_config_obj, resource_type, root_path, depth) {
    # Function RECURSIVELY crawls tfplan-v2.raw.configuration, and returns the config of all resources of a specified type.
    # In addition, it also calulates the `hcl_path` and `hcl_root` of the resources, and appends it to the object.
    # Eg: hcl_path = "module.gcp_on_prem_enabled_sa.vault_gcp_secret_static_account.default"
    #     hcl_root = "module.gcp_on_prem_enabled_sa"
    # Depth is just an internal variable for the function to know the recursion depth.
    #
    # Always call the function with (Sentinel doesn't support default values for functions):
    #   - root_path=""
    #   - depth=1
    #
    #
    # Usage:
    #   get_resources_by_type_raw(tfplan.raw.configuration.root_module, "vault_gcp_secret_static_account", "", 1)

    results = []
    trace = true

    # TODO - outer IF block is for testing only
    if "module_calls" in keys(tfplan_raw_config_obj) {
        for tfplan_raw_config_obj.module_calls else [] as _, m {
            if root_path != "" {
                root_path += "."
            }
            child_path = root_path + "module." + _
            utilities.print_trace(trace, "get_resources_by_type_raw: child_path", child_path)
            nested = get_resources_by_type_raw_temp(m.module, resource_type, child_path, depth + 1)
            if nested != [] {
                results += nested
            }
        }
    }

    # TODO - outer IF block is for testing only
    if "resources" in keys(tfplan_raw_config_obj) {
        for tfplan_raw_config_obj.resources else [] as r {
            if r.type == resource_type and r.mode != "data" {
                r["hcl_path"] = root_path + "." + r.address
                r["hcl_root"] = root_path
                append(results, r)
                utilities.print_trace(trace, "get_resources_by_type_raw: FOUND", r.hcl_path)
            }
        }
    }

    return results
}

static_accounts_raw = get_resources_by_type_raw_temp(tfplan.raw.configuration.root_module, rt, "", 1)

folders = {
	"dev": "non-prod",
	"tst": "non-prod",
	"uat": "non-pord",
	"npd": "non-prod",
	"prd": "prod",
	"prv": "proving",
	"shd": "shared",
}

env = standards.tfenv()
base_env = env[0:3]
app = standards.tfapp()

approved_vault_name_prefix = env + "-" + app + "-onprem-"
approved_sa_name_prefix = env + "-" + app + "-ad-"



fn_check_vault_static_accounts = func() {
	result = true

	for static_accounts as _, obj {
		utilities.print_trace(trace, "fn_check_vault_static_accounts", _)
		utilities.print_trace(trace, "fn_check_vault_static_accounts", obj.values)
		a = obj.values # The known fields of the Static Account

		# Make sure Vault secret backend (eg. "non-prod/gcp") matches GCP folder (eg. "non-prod")
		check = a.backend == folders[base_env] + "/gcp"
		!check and utilities.log_error(rt, a.static_account, "backend doesn't match current environment", a.backend)
		result = result and check

		# Make sure there are no GCP IAM role bindings on the Vault Static Account resource. These should be added to the GCP SA instead.
		check = a.binding == []
		!check and utilities.log_error(rt, a.static_account, "bindings not allowed on this resource. Please add the IAM bindings to the linked `google_service_account` resource instead", null)
		result = result and check

		# Only allow secret_token account type. service_account_key is denied.
		check = a.secret_type == "access_token"
		!check and utilities.log_error(rt, a.static_account, "secret_type must be access_token", null)
		result = result and check

		# Ensure Static Account naming convention
		check = strings.has_prefix(a.static_account, approved_vault_name_prefix)
		!check and utilities.log_error(rt, a.static_account, "has incorrect name. expected prefix", approved_vault_name_prefix)
		result = result and check
	}

	for static_accounts_raw as sr {
		# Ensure the Static Account doesn't have a custom SA email hardcoded.
		sa_email = sr.expressions.service_account_email.constant_value else null
		check = sa_email == null
		check_data = sa_email
		utilities.print_trace(trace, "check_static_accounts_raw", sr.address)
		!check and utilities.log_error(rt, sr.address, "service_account_email must be a local resource reference, not hardcoded", check_data)
		result = result and check

		# Ensure all Static Accounts are linked to locally a created GCP SA (and not from another module, or data resource)
		check = all sr.expressions.service_account_email.references else [] as gcp_sa_email {
			strings.has_prefix(gcp_sa_email, "google_service_account.")
		}
		check_data = filter sr.expressions.service_account_email.references else [] as gcp_sa_email {
			!strings.has_prefix(gcp_sa_email, "google_service_account.")
		}
		!check and utilities.log_error(rt, sr.address, "service_account_email must be a local account", sr.expressions.service_account_email.references[0])
		result = result and check

		# Dig out GCP SA and check name
		trace = true
		gcp_sas = filter sr.expressions.service_account_email.references else [] as gcp_sa_email {
			strings.has_prefix(gcp_sa_email, "google_service_account.")
		}
		for gcp_sas as sa {
			sa_hcl_path = sr.hcl_root + "." + sa
			utilities.print_trace(trace, "GCP SA FOUND:", sa_hcl_path)

			# Get SA planned values to check naming convention:
			sa_planned = tfplan.planned_values.resources[sa_hcl_path]
			utilities.print_trace(trace, "GCP SA Data:", sa_planned.values)
			check_data = sa_planned.values["account_id"]
			check = strings.has_prefix(check_data, approved_sa_name_prefix)
			!check and utilities.log_error("google_service_account", sa_hcl_path, "On-Prem Enabled GCP SA must match naming convention and have prefix", approved_sa_name_prefix)
			result = result and check
		}
	}

	return result
}

rule_check_vault_static_accounts = rule {
	fn_check_vault_static_accounts()
}

main = rule {
	rule_check_vault_static_accounts
}
